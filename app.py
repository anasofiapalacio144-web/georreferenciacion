# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wFOdDF5jygOCpZdnmmDSJGG-pweAjm_M
"""

import os
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import mapclassify
import contextily as ctx
from shapely.geometry import Point
import numpy as np
import streamlit as st

# =========================
# DASHBOARD DE MAPA
# =========================
st.title("üó∫Ô∏è Mapa tem√°tico: Densidad de puntos por departamento")
st.caption("App desarrollada con Streamlit + GeoPandas + Contextily")

# -------------------------
# 1Ô∏è‚É£ Subir archivos
# -------------------------
st.sidebar.header("üìÇ Cargar datos")
uploaded_shp = st.sidebar.file_uploader("Sube tu shapefile (.shp)", type=["shp"])
uploaded_csv = st.sidebar.file_uploader("Sube tu archivo de puntos (CSV, opcional)", type=["csv"])

if uploaded_shp is None:
    st.warning("Por favor sube un archivo shapefile (.shp) para continuar.")
    st.stop()

# Guardar el shapefile temporalmente (junto con sus archivos asociados)
with open("temp.shp", "wb") as f:
    f.write(uploaded_shp.getbuffer())

shapefile_path = "temp.shp"

# -------------------------
# 2Ô∏è‚É£ Leer shapefile
# -------------------------
gdf = gpd.read_file(shapefile_path)
st.success(f"Capa cargada correctamente ({len(gdf)} registros)")
st.write("Vista previa de atributos:")
st.dataframe(gdf.head())

# -------------------------
# 3Ô∏è‚É£ Limpieza y validaci√≥n
# -------------------------
gdf = gdf[~gdf.geometry.is_empty & gdf.geometry.notnull()].copy()
gdf.loc[~gdf.geometry.is_valid, "geometry"] = gdf.loc[~gdf.geometry.is_valid, "geometry"].buffer(0)

# -------------------------
# 4Ô∏è‚É£ Proyecci√≥n y c√°lculo de √°rea
# -------------------------
if gdf.crs is None:
    gdf.set_crs(epsg=4326, inplace=True)

metric_crs = "EPSG:3116"
gdf_m = gdf.to_crs(metric_crs)
gdf_m["area_km2"] = (gdf_m.geometry.area / 1e6).round(3)

# -------------------------
# 5Ô∏è‚É£ Puntos (CSV o generados)
# -------------------------
if uploaded_csv:
    pts_df = pd.read_csv(uploaded_csv)
    pts_gdf = gpd.GeoDataFrame(
        pts_df,
        geometry=gpd.points_from_xy(pts_df["longitude"], pts_df["latitude"]),
        crs="EPSG:4326"
    )
    st.info("‚úÖ CSV cargado correctamente.")
else:
    st.info("No se subi√≥ CSV, generando 100 puntos aleatorios de ejemplo.")
    minx, miny, maxx, maxy = gdf.total_bounds
    np.random.seed(42)
    xs = np.random.uniform(minx, maxx, 100)
    ys = np.random.uniform(miny, maxy, 100)
    pts = [Point(x, y) for x, y in zip(xs, ys)]
    pts_gdf = gpd.GeoDataFrame({"id_point": range(100)}, geometry=pts, crs=gdf.crs)

pts_gdf_m = pts_gdf.to_crs(metric_crs)

# -------------------------
# 6Ô∏è‚É£ Join espacial y conteo
# -------------------------
joined = gpd.sjoin(pts_gdf_m, gdf_m, how="left", predicate="within")
counts = joined.groupby("index_right").size().rename("n_points").reset_index()
gdf_m = gdf_m.reset_index().merge(counts, left_index=True, right_on="index_right", how="left")
gdf_m["n_points"] = gdf_m["n_points"].fillna(0).astype(int)
gdf_m["points_per_1000km2"] = ((gdf_m["n_points"] / gdf_m["area_km2"]) * 1000).round(2)

# -------------------------
# 7Ô∏è‚É£ Clasificaci√≥n y mapa
# -------------------------
var = "points_per_1000km2"
classifier = mapclassify.NaturalBreaks(gdf_m[var], k=6)
gdf_m["class"] = classifier.yb

gdf_web = gdf_m.to_crs(epsg=3857)
fig, ax = plt.subplots(figsize=(10, 8))
gdf_web.plot(column="class", cmap="viridis", linewidth=0.3, ax=ax, edgecolor="0.6", legend=False)
ctx.add_basemap(ax, source=ctx.providers.OpenTopoMap, crs=gdf_web.crs.to_string(), zoom=6)
ax.set_axis_off()
ax.set_title("Densidad de puntos por 1000 km¬≤", fontsize=14)
st.pyplot(fig)

# -------------------------
# 8Ô∏è‚É£ Resultados y an√°lisis
# -------------------------
st.subheader("üìä Resumen estad√≠stico")
st.write(gdf_m[["area_km2", "n_points", "points_per_1000km2"]].describe())

top_density = gdf_m.sort_values("points_per_1000km2", ascending=False).head(5)
st.subheader("üèÜ Top 5 departamentos por densidad de puntos")
st.dataframe(top_density[["n_points", "points_per_1000km2", "area_km2"]])

# Insight autom√°tico simple
col_name = next((c for c in gdf_m.columns if "NOM" in c.upper() or "NAME" in c.upper()), None)
if col_name:
    max_row = top_density.iloc[0]
    st.markdown(f"""
    **Insight r√°pido:**
    - El departamento con mayor densidad de puntos es **{max_row[col_name]}**
      con aproximadamente **{max_row['points_per_1000km2']} puntos/1000 km¬≤.**
    """)

st.info("‚úÖ An√°lisis completado exitosamente.")

